git init - vytvoří git(skrita složka)

git reset --hard HEAD^ - smaže poslední commit

git add př.index.html (bez apostrofu) - přidá zvolený soubor do mezipaměti
git add . - Přidá všechny soubory ve složce do mezipaměti

git commit -m "sem napiš co si změnil od minule" - přidá vše z mezipaměti do gitu a uděla komentař
git commit - otevře se soubor kam zapises komentar, pro ulozeni soubor zavri
git commit --amend - přidá soubory z mezipaměti do posledního commitu(komentař přepišeš po odeslani přikazu)
(git commit --amend - LZE TÍM PŘEPSAT KOMENTAŘ PO SLOUČENÍ VĚTVÍ)

(bez git) cat zvoleny-souboru - vypiše obsah zvoleneho souboru
(bez git) code zvoleny-souboru - otevře zvolený soubor v defaultním editoru
(bez git) pwd - vypiše cestu na aktialni polohu

git status - vypiše v jakem stavu jsou soubory (neuloženy, v mezipaměti, už poslíny commitem)

git log - vypiše všechny změny které jsi uložil do gitu
git log --oneline - vypiše všechny změny které jsi uložil do gitu na jednom řadku

git show aw213wsd - vypiše změny ktere proběhly v commitu pod danym hashem

git checkout aw213wsd - předune tě do dané verze souboru
git checkout master - přesune tě do maste souboru
git checkout nazev-vetve - přepne tě do zvolené větve (STARŠÍ VERZE SWITCH)

git branch - vypíše seznam větví
git branch nazev-nove-vetve - vytvoří novou větev
git branch -d nazev-vetve - vymaže zvolenou větev
git branch -D nazev-vetve - vymaže zvolenou větev(I KDYŽ NENI FULLL BRANCH)
git branch -m "novy-nazev-vetve" - přejmenuje větev ve které se aktuálně nacházíme na zvolený název
git switch -c nazev-nove-vetve - vytvoří novou větev a rovnou tě do ní i přepne
git switch nazev-vetve - přepne tě do zvolené větve

git merge zvolena-vetve - přesune zvolenou větev do větve v které aktuálně jsme (FAST MERGE)

git diff - porovna obsah ze složky kde pracujeme oproti poslednimu commitu
git diff --staged - porovna obsah z mezipaměti oproti poslednimu commitu
git diff head - porovna obsah složky kde pracujeme i mezipaměti oproti poslednimu commitu
git diff nazev-souboru - porovna nazev-soubor(třeba style.css) u ze složky kde pracujeme oproti poslednimu commit
git diff 0fc5272 d6dd0a3 - View difference between commited hashes
git diff nazev-prvni-vetve nazev-druhe-vetve - porovna poslední commity obou větví 
(LZE NAPSAT I JAKO git diff nazev-prvni-vetv..nazev-druhe-vetve)

GitHub{
git remote - vypíše název (origin)
git remote -v - vypíše název a podrobnosti o propojení
git remote rename stary-nazev novy-nazev - přejmenuje (z pravidla origin) na nový název
git remote remove nazev-spojeni -(z pravidla origin) odstraní spojení

git push origin nazev-vezve - vloží commity do gitbuhu
git push origin nazev-vetve:vetem-kam-chceme-commity-ulozit - uloží zvolenou větev do jiné větve 
(NAZEV VĚTVE KAM VKLADAME MUSÍ ODPOVÍDAT NAZVU V GITHubu(v gitu muže být jiný))

git clone https://github.com/gabrielecirulli/2048.git - naklonuje do složky soubor z odkazu
(VE SLOŽCE KAM KLONUJEME NESMÍ BÝT UŽ INICIALIZOVANY GIT)
}

NEVIDITELNA SLOŽKA/SOUBOR 
1. vytvoř soubor .gitignore 
2. otevři ho a napiš do něj nazvy souborů/složek, které nemají být vydět
3. přidej .gitignored do mezipaměti a commitni ho.(za nazvem složky musí být lomítko př.: slozka/)